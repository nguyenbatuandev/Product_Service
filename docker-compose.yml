version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: product_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: product_service_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "@BCxyz123"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - product_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: product_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - product_network

  # Product Service API
  app:
    build: .
    container_name: product_service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: "@BCxyz123"
      DB_NAME: product_service_db
      DB_SSLMODE: disable
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DATABASE: 0
      
      # Server
      SERVER_PORT: 8082
      GIN_MODE: release
      
      # JWT
      JWT_SECRET: qwertyuiopiuytsdfghjkllkjhgfddfghjklkjhgfddfghjkkj
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - product_network

volumes:
  postgres_data:
  redis_data:

networks:
  product_network:
    driver: bridge
